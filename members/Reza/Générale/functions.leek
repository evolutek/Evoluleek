include("globals")

function ATTACK()
{
	for (var i = 0; i < count(ARMES); i++) {
		if (ARMES[i]["type"] == "arme") {
			debug("PIOU PIOU")
			if ((getWeapon() == null or getWeapon() != ARMES[i]["id"]) and
				canUseWeapon(ARMES[i]["id"], enemy) and
				getTP() >= ARMES[i]["cout"]+1) {
				setWeapon(ARMES[i]["id"])
			}
			while (getWeapon() == ARMES[i]["id"] and
				   canUseWeapon(enemy) and
				   getTP() >= ARMES[i]["cout"]) {
				debug("FEU ARME " + i + " TPs: " + getTP() + " Cout: " + ARMES[i]["cout"] + "(" + getWeaponCost(ARMES[i]["id"]) + ")")
				useWeapon(enemy)
				ARMES[i]["dispo"] = 0
			}
		} else {
			while (canUseChip(ARMES[i]["id"], enemy) and
				   getTP() >= ARMES[i]["cout"] and
				   ARMES[i]["dispo"] == ARMES[i]["dispo_max"]) {
				debug("FEU PUCE " + i)
				useChip(ARMES[i]["id"], enemy)
				ARMES[i]["dispo"] = 0
			}
		}
	}
}

function GO_HIDE()
{
	clearMarks()
	fill(cases, true, 613) 
	
	// Removing taken spots
	var obstacles = getObstacles()
	for (var i = 0; i < count(obstacles); i++) {
		cases[obstacles[i]] = false
	}

	// Getting hiding spots
	for (var i = 0; i < 613; i++) {
		if (getCellDistance(getCell(enemy), i) <= getMP(enemy)) {
			for (var j = 0; j < 613; j++) {
				if (lineOfSight(i, j) and cases[j]) {
					cases[j] = false
				}
			}
		}
	}

	// Getting the nearest one
	var nearestID = 0
	var nearestDist = 999
	for (var i = 0; i < 613; i++) {
		if (cases[i]) {
			mark(i, getColor(255, 0, 0))
			if (getCellDistance(getCell(), i) < nearestDist) {
				nearestID = i
				nearestDist = getCellDistance(getCell(), i)
			}
		}
	}
	mark(nearestID, getColor(0, 0, 255))
	
	return nearestID
}

function GO_ATTACK(arme)
{
	clearMarks()
	var cells = arme["GET_CELLS_TO_USE"](enemy)
	removeElement(cells, getCell(enemy))

	// Getting the nearest one
	var nearestID = cells[0]
	var nearestDist = 999
	for (var i = 0; i < count(cells); i++) {
		mark(cells[i], getColor(0, 255, 0))
		if (getCellDistance(getCell(), cells[i]) < nearestDist) {  // J'ai viré la condition sur être au moins à minmax range pcq ça faisais des chemins pas opti
			nearestID = cells[i]
			nearestDist = getCellDistance(getCell(), cells[i])
		}
	}
	mark(nearestID, getColor(0, 0, 255))
	
	return nearestID
}

function GET_ENEMIES()
{
	var enemiess = getEnemies()
	debug("ENNEMIS " + enemies)
	
	// On vire les coffres
	for (var i = 0; i < count(enemiess); i++) {
		if (contains(getName(enemiess[i]), "chest")) {
			insert(enemies[2], enemiess[i], 0)
			remove(enemiess, i)
		}
	}
	var turret = getEnemyTurret()
	if (turret != null) {
		removeElement(enemiess, turret)
		insert(enemies[0], turret, 0)
	}
	enemies[1] = enemiess
	debug("COFFRES ENNEMIS " + enemies[2])
	debug("POIREAUX ENNEMIS " + enemies[1])
	debug("TOURELLE ENNEMIE " + enemies[0])
}

function GET_ENEMY()
{
	for (var i = 0; i < 3; i++) {
		for (var j = 0; j < count(enemies[i]); j++) {
			if (isAlive(enemies[i][j])) {
				return enemies[i][j]
			}
		}
	}
}